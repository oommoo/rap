// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/recolude/rap/pkg/data (interfaces: Recording,CaptureStream)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	data "github.com/recolude/rap/pkg/data"
)

// MockRecording is a mock of Recording interface.
type MockRecording struct {
	ctrl     *gomock.Controller
	recorder *MockRecordingMockRecorder
}

// MockRecordingMockRecorder is the mock recorder for MockRecording.
type MockRecordingMockRecorder struct {
	mock *MockRecording
}

// NewMockRecording creates a new mock instance.
func NewMockRecording(ctrl *gomock.Controller) *MockRecording {
	mock := &MockRecording{ctrl: ctrl}
	mock.recorder = &MockRecordingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecording) EXPECT() *MockRecordingMockRecorder {
	return m.recorder
}

// Binaries mocks base method.
func (m *MockRecording) Binaries() []data.Binary {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Binaries")
	ret0, _ := ret[0].([]data.Binary)
	return ret0
}

// Binaries indicates an expected call of Binaries.
func (mr *MockRecordingMockRecorder) Binaries() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Binaries", reflect.TypeOf((*MockRecording)(nil).Binaries))
}

// CaptureStreams mocks base method.
func (m *MockRecording) CaptureStreams() []data.CaptureStream {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CaptureStreams")
	ret0, _ := ret[0].([]data.CaptureStream)
	return ret0
}

// CaptureStreams indicates an expected call of CaptureStreams.
func (mr *MockRecordingMockRecorder) CaptureStreams() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CaptureStreams", reflect.TypeOf((*MockRecording)(nil).CaptureStreams))
}

// Metadata mocks base method.
func (m *MockRecording) Metadata() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Metadata")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Metadata indicates an expected call of Metadata.
func (mr *MockRecordingMockRecorder) Metadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metadata", reflect.TypeOf((*MockRecording)(nil).Metadata))
}

// Name mocks base method.
func (m *MockRecording) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockRecordingMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockRecording)(nil).Name))
}

// Recordings mocks base method.
func (m *MockRecording) Recordings() []data.Recording {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recordings")
	ret0, _ := ret[0].([]data.Recording)
	return ret0
}

// Recordings indicates an expected call of Recordings.
func (mr *MockRecordingMockRecorder) Recordings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recordings", reflect.TypeOf((*MockRecording)(nil).Recordings))
}

// MockCaptureStream is a mock of CaptureStream interface.
type MockCaptureStream struct {
	ctrl     *gomock.Controller
	recorder *MockCaptureStreamMockRecorder
}

// MockCaptureStreamMockRecorder is the mock recorder for MockCaptureStream.
type MockCaptureStreamMockRecorder struct {
	mock *MockCaptureStream
}

// NewMockCaptureStream creates a new mock instance.
func NewMockCaptureStream(ctrl *gomock.Controller) *MockCaptureStream {
	mock := &MockCaptureStream{ctrl: ctrl}
	mock.recorder = &MockCaptureStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCaptureStream) EXPECT() *MockCaptureStreamMockRecorder {
	return m.recorder
}

// Captures mocks base method.
func (m *MockCaptureStream) Captures() []data.Capture {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Captures")
	ret0, _ := ret[0].([]data.Capture)
	return ret0
}

// Captures indicates an expected call of Captures.
func (mr *MockCaptureStreamMockRecorder) Captures() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Captures", reflect.TypeOf((*MockCaptureStream)(nil).Captures))
}

// Name mocks base method.
func (m *MockCaptureStream) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockCaptureStreamMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockCaptureStream)(nil).Name))
}

// Signature mocks base method.
func (m *MockCaptureStream) Signature() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Signature")
	ret0, _ := ret[0].(string)
	return ret0
}

// Signature indicates an expected call of Signature.
func (mr *MockCaptureStreamMockRecorder) Signature() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signature", reflect.TypeOf((*MockCaptureStream)(nil).Signature))
}
