// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/recolude/rap/format (interfaces: Recording,CaptureCollection,Binary,BinaryReference)

// Package mocks is a generated GoMock package.
package mocks

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	format "github.com/recolude/rap/format"
	metadata "github.com/recolude/rap/format/metadata"
)

// MockRecording is a mock of Recording interface.
type MockRecording struct {
	ctrl     *gomock.Controller
	recorder *MockRecordingMockRecorder
}

// MockRecordingMockRecorder is the mock recorder for MockRecording.
type MockRecordingMockRecorder struct {
	mock *MockRecording
}

// NewMockRecording creates a new mock instance.
func NewMockRecording(ctrl *gomock.Controller) *MockRecording {
	mock := &MockRecording{ctrl: ctrl}
	mock.recorder = &MockRecordingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecording) EXPECT() *MockRecordingMockRecorder {
	return m.recorder
}

// Binaries mocks base method.
func (m *MockRecording) Binaries() []format.Binary {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Binaries")
	ret0, _ := ret[0].([]format.Binary)
	return ret0
}

// Binaries indicates an expected call of Binaries.
func (mr *MockRecordingMockRecorder) Binaries() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Binaries", reflect.TypeOf((*MockRecording)(nil).Binaries))
}

// BinaryReferences mocks base method.
func (m *MockRecording) BinaryReferences() []format.BinaryReference {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BinaryReferences")
	ret0, _ := ret[0].([]format.BinaryReference)
	return ret0
}

// BinaryReferences indicates an expected call of BinaryReferences.
func (mr *MockRecordingMockRecorder) BinaryReferences() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BinaryReferences", reflect.TypeOf((*MockRecording)(nil).BinaryReferences))
}

// CaptureCollections mocks base method.
func (m *MockRecording) CaptureCollections() []format.CaptureCollection {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CaptureCollections")
	ret0, _ := ret[0].([]format.CaptureCollection)
	return ret0
}

// CaptureCollections indicates an expected call of CaptureCollections.
func (mr *MockRecordingMockRecorder) CaptureCollections() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CaptureCollections", reflect.TypeOf((*MockRecording)(nil).CaptureCollections))
}

// ID mocks base method.
func (m *MockRecording) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockRecordingMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockRecording)(nil).ID))
}

// Metadata mocks base method.
func (m *MockRecording) Metadata() metadata.Block {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Metadata")
	ret0, _ := ret[0].(metadata.Block)
	return ret0
}

// Metadata indicates an expected call of Metadata.
func (mr *MockRecordingMockRecorder) Metadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metadata", reflect.TypeOf((*MockRecording)(nil).Metadata))
}

// Name mocks base method.
func (m *MockRecording) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockRecordingMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockRecording)(nil).Name))
}

// Recordings mocks base method.
func (m *MockRecording) Recordings() []format.Recording {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recordings")
	ret0, _ := ret[0].([]format.Recording)
	return ret0
}

// Recordings indicates an expected call of Recordings.
func (mr *MockRecordingMockRecorder) Recordings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recordings", reflect.TypeOf((*MockRecording)(nil).Recordings))
}

// MockCaptureCollection is a mock of CaptureCollection interface.
type MockCaptureCollection struct {
	ctrl     *gomock.Controller
	recorder *MockCaptureCollectionMockRecorder
}

// MockCaptureCollectionMockRecorder is the mock recorder for MockCaptureCollection.
type MockCaptureCollectionMockRecorder struct {
	mock *MockCaptureCollection
}

// NewMockCaptureCollection creates a new mock instance.
func NewMockCaptureCollection(ctrl *gomock.Controller) *MockCaptureCollection {
	mock := &MockCaptureCollection{ctrl: ctrl}
	mock.recorder = &MockCaptureCollectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCaptureCollection) EXPECT() *MockCaptureCollectionMockRecorder {
	return m.recorder
}

// CaptureAt mocks base method.
func (m *MockCaptureCollection) CaptureAt(arg0 int) format.Capture {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CaptureAt", arg0)
	ret0, _ := ret[0].(format.Capture)
	return ret0
}

// CaptureAt indicates an expected call of CaptureAt.
func (mr *MockCaptureCollectionMockRecorder) CaptureAt(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CaptureAt", reflect.TypeOf((*MockCaptureCollection)(nil).CaptureAt), arg0)
}

// Captures mocks base method.
func (m *MockCaptureCollection) Captures() []format.Capture {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Captures")
	ret0, _ := ret[0].([]format.Capture)
	return ret0
}

// Captures indicates an expected call of Captures.
func (mr *MockCaptureCollectionMockRecorder) Captures() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Captures", reflect.TypeOf((*MockCaptureCollection)(nil).Captures))
}

// End mocks base method.
func (m *MockCaptureCollection) End() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "End")
	ret0, _ := ret[0].(float64)
	return ret0
}

// End indicates an expected call of End.
func (mr *MockCaptureCollectionMockRecorder) End() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "End", reflect.TypeOf((*MockCaptureCollection)(nil).End))
}

// Length mocks base method.
func (m *MockCaptureCollection) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length.
func (mr *MockCaptureCollectionMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockCaptureCollection)(nil).Length))
}

// Name mocks base method.
func (m *MockCaptureCollection) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockCaptureCollectionMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockCaptureCollection)(nil).Name))
}

// Signature mocks base method.
func (m *MockCaptureCollection) Signature() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Signature")
	ret0, _ := ret[0].(string)
	return ret0
}

// Signature indicates an expected call of Signature.
func (mr *MockCaptureCollectionMockRecorder) Signature() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signature", reflect.TypeOf((*MockCaptureCollection)(nil).Signature))
}

// Slice mocks base method.
func (m *MockCaptureCollection) Slice(arg0, arg1 float64) format.CaptureCollection {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Slice", arg0, arg1)
	ret0, _ := ret[0].(format.CaptureCollection)
	return ret0
}

// Slice indicates an expected call of Slice.
func (mr *MockCaptureCollectionMockRecorder) Slice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Slice", reflect.TypeOf((*MockCaptureCollection)(nil).Slice), arg0, arg1)
}

// Start mocks base method.
func (m *MockCaptureCollection) Start() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(float64)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockCaptureCollectionMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockCaptureCollection)(nil).Start))
}

// MockBinary is a mock of Binary interface.
type MockBinary struct {
	ctrl     *gomock.Controller
	recorder *MockBinaryMockRecorder
}

// MockBinaryMockRecorder is the mock recorder for MockBinary.
type MockBinaryMockRecorder struct {
	mock *MockBinary
}

// NewMockBinary creates a new mock instance.
func NewMockBinary(ctrl *gomock.Controller) *MockBinary {
	mock := &MockBinary{ctrl: ctrl}
	mock.recorder = &MockBinaryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBinary) EXPECT() *MockBinaryMockRecorder {
	return m.recorder
}

// Data mocks base method.
func (m *MockBinary) Data() io.Reader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Data")
	ret0, _ := ret[0].(io.Reader)
	return ret0
}

// Data indicates an expected call of Data.
func (mr *MockBinaryMockRecorder) Data() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Data", reflect.TypeOf((*MockBinary)(nil).Data))
}

// Metadata mocks base method.
func (m *MockBinary) Metadata() metadata.Block {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Metadata")
	ret0, _ := ret[0].(metadata.Block)
	return ret0
}

// Metadata indicates an expected call of Metadata.
func (mr *MockBinaryMockRecorder) Metadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metadata", reflect.TypeOf((*MockBinary)(nil).Metadata))
}

// Name mocks base method.
func (m *MockBinary) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockBinaryMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockBinary)(nil).Name))
}

// Size mocks base method.
func (m *MockBinary) Size() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockBinaryMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockBinary)(nil).Size))
}

// MockBinaryReference is a mock of BinaryReference interface.
type MockBinaryReference struct {
	ctrl     *gomock.Controller
	recorder *MockBinaryReferenceMockRecorder
}

// MockBinaryReferenceMockRecorder is the mock recorder for MockBinaryReference.
type MockBinaryReferenceMockRecorder struct {
	mock *MockBinaryReference
}

// NewMockBinaryReference creates a new mock instance.
func NewMockBinaryReference(ctrl *gomock.Controller) *MockBinaryReference {
	mock := &MockBinaryReference{ctrl: ctrl}
	mock.recorder = &MockBinaryReferenceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBinaryReference) EXPECT() *MockBinaryReferenceMockRecorder {
	return m.recorder
}

// Metadata mocks base method.
func (m *MockBinaryReference) Metadata() metadata.Block {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Metadata")
	ret0, _ := ret[0].(metadata.Block)
	return ret0
}

// Metadata indicates an expected call of Metadata.
func (mr *MockBinaryReferenceMockRecorder) Metadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metadata", reflect.TypeOf((*MockBinaryReference)(nil).Metadata))
}

// Name mocks base method.
func (m *MockBinaryReference) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockBinaryReferenceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockBinaryReference)(nil).Name))
}

// Size mocks base method.
func (m *MockBinaryReference) Size() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockBinaryReferenceMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockBinaryReference)(nil).Size))
}

// URI mocks base method.
func (m *MockBinaryReference) URI() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "URI")
	ret0, _ := ret[0].(string)
	return ret0
}

// URI indicates an expected call of URI.
func (mr *MockBinaryReferenceMockRecorder) URI() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "URI", reflect.TypeOf((*MockBinaryReference)(nil).URI))
}
